/***************************************************************************
*
* AFS Â© 2013 Antidot
*
***************************************************************************/
// java_antidot_api
package N_Query_Engine.Predicate;

import "AFS/MESSAGES/cond.proto";
import "AFS/MESSAGES/text.proto";
import "AFS/MESSAGES/geo.proto";
import "AFS/MESSAGES/expr.proto";
import "google/protobuf/descriptor.proto";

option java_package = "net.antidot.protobuf.predicate";
option java_outer_classname = "PredProto";

message Pred
{
  extensions 1000 to 1099;
}

//
// Binary predicates
//
enum Binary_Pred_Operator
{
  BPO_AND = 1 [ (keyword) = "and" ];
  BPO_OR = 2  [ (keyword) = "or" ];
  BPO_COMMA = 3  [ (keyword) = "," ];
  BPO_PIPE = 4  [ (keyword) = "|" ];
  BPO_SEMICOL = 5  [ (keyword) = ";" ];
  BPO_COLON = 6  [ (keyword) = ":" ];
  BPO_INTERVAL = 7  [ (keyword) = ".." ]; // internal use only
}

message Binary_Pred
{
  required Binary_Pred_Operator	op = 1;
  //optional string				keyword = 2; // natural language
  // keyword that
  // triggered op
  required Pred					lpred = 3;
  required Pred					rpred = 4;
  optional uint64 				max_pathlen = 5; // if set, maximum
											  // agregated pathlen for
											  // children text
											  // predicates (7.6.3 ->)
}

//
// Unary predicates
//
enum Unary_Pred_Operator
{
  UPO_NOT = 1;
}

message Unary_Pred
{
  required Unary_Pred_Operator	op = 1;
  required Pred					pred = 2;
}

//
// Parenthesized Pred
//
message Parenthesized_Pred
{
  required Pred					pred = 1;
}

//
// Condition predicate : imported from cond.proto
// Text predicate : imported from text.proto
// 

message Merge_Operator
{
  required Binary_Pred_Operator op = 1;
}

//
// Register extensions
//
extend Pred
{
  optional Binary_Pred			bpred = 1000;
  optional Unary_Pred			upred = 1001;
  optional Parenthesized_Pred	ppred = 1002;
  optional Condition_Pred		cpred = 1003;
  optional Text_Pred			tpred = 1004;
  optional Expr					expr  = 1005; // for LR parser (???)
  optional Geodist_Pred			gdpred= 1006;
  // CAUTION: if this list is altered then QUERY_ENGINE/SEARCH::parse_and_and
  // must be altered (the code checks for all possible extension)

  // Internal use only, for merging
  optional Merge_Operator merge_op = 1007;
}
