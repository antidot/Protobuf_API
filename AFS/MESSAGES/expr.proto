/***************************************************************************
*
* AFS Â© 2013 Antidot
*
***************************************************************************/
// java_antidot_api
package N_Query_Engine.Predicate;

import "google/protobuf/descriptor.proto";

option java_package = "net.antidot.protobuf.predicate";
option java_outer_classname = "ExprProto";

extend google.protobuf.EnumValueOptions
{
  optional string keyword = 12009;
}

//
// Generic expressions
//
message Expr
{
  extensions 1000 to 1099;
}

// Literals
message Integer
{
  required int64 value = 1;
}

message Real
{
  required int64 integral = 1; // integer part
  required int64 scaledFractional = 2; // decimal part, times 1escaleFactor
  required int32 scaleFactor = 3; // default is 10
}

message String
{
  required string value = 1;
}

message Boolean
{
  required bool value = 1;
}

message Identifier
{
  required string name = 1;
}

// Combinations
enum Unary_Expr_Operator
{
  UEO_MINUS = 1;
}

enum Binary_Expr_Operator
{
  BEO_PLUS = 1;
  BEO_MINUS = 2;
  BEO_TIMES = 3;
  BEO_DIVIDE = 4;
  BEO_COMMA = 5;
}

message Unary_Expr
{
  required Unary_Expr_Operator op = 1;
  required Expr value = 2;
}

message Binary_Expr
{
  required Binary_Expr_Operator op = 1;
  required Expr lvalue = 2;
  required Expr rvalue = 3;
}

//
// Parenthesized Expr
//
message Parenthesized_Expr
{
  required Expr	value = 1;
}

//
// Function
//
message Function
{
  required string name = 1;
  repeated Expr params = 2;
}

// Interval
message Interval
{
  required Expr lower_bound = 1;
  required bool lower_bound_included = 2;
  required Expr upper_bound = 3;
  required bool upper_bound_included = 4;
}

// Void (internal parser use)
message Void
{
}

/// QOPT
// Set
message Set
{
  repeated Expr items = 1;
}
/// /QOPT

//
// Register extensions
//
extend Expr
{
  // Literals
  // Any addition to this list should be propagated to
  // is_literal() in pred.h
  optional Integer integer_ext = 1000;
  optional Real real_ext = 1001;
  optional String string_ext = 1002;
  optional Boolean bool_ext = 1004;

  // Variables
  optional Identifier identifier_ext = 1010;

  // Combinations
  optional Unary_Expr unexpr_ext = 1020;
  optional Binary_Expr binexpr_ext = 1021;
  optional Parenthesized_Expr pexpr_ext = 1022;

  // Functions
  optional Function fexpr_ext = 1030;

  // Intervals, Sets
  optional Interval interval_ext = 1040;
  optional Set set_ext = 1041; /// QOPT

  // Void (internal parser use)
  optional Void void_ext = 1050;
}
